-- Attaching core tidyverse packages ------------------------ tidyverse 2.0.0 --
v dplyr     1.1.2     v readr     2.1.4
v forcats   1.0.0     v stringr   1.5.0
v ggplot2   3.4.2     v tibble    3.2.1
v lubridate 1.9.2     v tidyr     1.3.0
v purrr     1.0.1     
-- Conflicts ------------------------------------------ tidyverse_conflicts() --
x dplyr::filter() masks stats::filter()
x dplyr::lag()    masks stats::lag()
i Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors
The legacy packages maptools, rgdal, and rgeos, underpinning the sp package,
which was just loaded, will retire in October 2023.
Please refer to R-spatial evolution reports for details, especially
https://r-spatial.org/r/2023/05/15/evolution4.html.
It may be desirable to make the sf package available;
package maintainers should consider adding sf to Suggests:.
The sp package is now running under evolution status 2
     (status 2 uses the sf package in place of rgdal)
Attaching SeuratObject
Warning message:
package 'SeuratData' was built under R version 4.2.2 
Loading required package: grid
========================================
ComplexHeatmap version 2.15.4
Bioconductor page: http://bioconductor.org/packages/ComplexHeatmap/
Github page: https://github.com/jokergoo/ComplexHeatmap
Documentation: http://jokergoo.github.io/ComplexHeatmap-reference

If you use it in published research, please cite either one:
- Gu, Z. Complex Heatmap Visualization. iMeta 2022.
- Gu, Z. Complex heatmaps reveal patterns and correlations in multidimensional 
    genomic data. Bioinformatics 2016.


The new InteractiveComplexHeatmap package can directly export static 
complex heatmaps into an interactive Shiny app with zero effort. Have a try!

This message can be suppressed by:
  suppressPackageStartupMessages(library(ComplexHeatmap))
========================================

Projecting cell embeddings
Finding neighborhoods
Finding anchors
	Found 6935 anchors
Filtering anchors
	Retained 2076 anchors
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Predicting cell labels
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Predicting cell labels

Integrating dataset 2 with reference dataset
Finding integration vectors
Integrating data
Computing nearest neighbors
Warning: The default method for RunUMAP has changed from calling Python UMAP via reticulate to the R-native UWOT using the cosine metric
To use Python UMAP via reticulate, set umap.method to 'umap-learn' and metric to 'correlation'
This message will be shown once per session
Running UMAP projection
16:17:18 Read 13044 rows
16:17:18 Processing block 1 of 1
16:17:18 Commencing smooth kNN distance calibration using 1 thread with target n_neighbors = 30
16:17:18 Initializing by weighted average of neighbor coordinates using 1 thread
16:17:18 Commencing optimization for 67 epochs, with 391320 positive edges
Using method 'umap'
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
16:17:24 Finished
Projecting cell embeddings
Finding neighborhoods
Finding anchors
	Found 11950 anchors
Filtering anchors
	Retained 2077 anchors
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Predicting cell labels
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Predicting cell labels

Integrating dataset 2 with reference dataset
Finding integration vectors
Integrating data
Computing nearest neighbors
Running UMAP projection
16:22:51 Read 22359 rows
16:22:51 Processing block 1 of 1
16:22:51 Commencing smooth kNN distance calibration using 1 thread with target n_neighbors = 30
16:22:51 Initializing by weighted average of neighbor coordinates using 1 thread
16:22:51 Commencing optimization for 67 epochs, with 670770 positive edges
Using method 'umap'
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
16:23:03 Finished
Projecting cell embeddings
Finding neighborhoods
Finding anchors
	Found 10027 anchors
Filtering anchors
	Retained 2016 anchors
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Predicting cell labels
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Predicting cell labels

Integrating dataset 2 with reference dataset
Finding integration vectors
Integrating data
Computing nearest neighbors
Running UMAP projection
16:27:46 Read 18993 rows
16:27:46 Processing block 1 of 1
16:27:46 Commencing smooth kNN distance calibration using 1 thread with target n_neighbors = 30
16:27:46 Initializing by weighted average of neighbor coordinates using 1 thread
16:27:46 Commencing optimization for 67 epochs, with 569790 positive edges
Using method 'umap'
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
16:27:55 Finished
Projecting cell embeddings
Finding neighborhoods
Finding anchors
	Found 7706 anchors
Filtering anchors
	Retained 2563 anchors
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Predicting cell labels
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Predicting cell labels

Integrating dataset 2 with reference dataset
Finding integration vectors
Integrating data
Computing nearest neighbors
Running UMAP projection
16:31:36 Read 9314 rows
16:31:36 Processing block 1 of 1
16:31:36 Commencing smooth kNN distance calibration using 1 thread with target n_neighbors = 30
16:31:36 Initializing by weighted average of neighbor coordinates using 1 thread
16:31:36 Commencing optimization for 67 epochs, with 279420 positive edges
Using method 'umap'
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
16:31:41 Finished
Projecting cell embeddings
Finding neighborhoods
Finding anchors
	Found 10359 anchors
Filtering anchors
	Retained 1840 anchors
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Predicting cell labels
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Predicting cell labels

Integrating dataset 2 with reference dataset
Finding integration vectors
Integrating data
Computing nearest neighbors
Running UMAP projection
16:36:36 Read 20426 rows
16:36:36 Processing block 1 of 1
16:36:36 Commencing smooth kNN distance calibration using 1 thread with target n_neighbors = 30
16:36:37 Initializing by weighted average of neighbor coordinates using 1 thread
16:36:37 Commencing optimization for 67 epochs, with 612780 positive edges
Using method 'umap'
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
16:36:47 Finished
Projecting cell embeddings
Finding neighborhoods
Finding anchors
	Found 8918 anchors
Filtering anchors
	Retained 1534 anchors
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Predicting cell labels
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Predicting cell labels

Integrating dataset 2 with reference dataset
Finding integration vectors
Integrating data
Computing nearest neighbors
Running UMAP projection
16:41:22 Read 22340 rows
16:41:22 Processing block 1 of 1
16:41:22 Commencing smooth kNN distance calibration using 1 thread with target n_neighbors = 30
16:41:22 Initializing by weighted average of neighbor coordinates using 1 thread
16:41:22 Commencing optimization for 67 epochs, with 670200 positive edges
Using method 'umap'
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
16:41:33 Finished
Projecting cell embeddings
Finding neighborhoods
Finding anchors
	Found 11106 anchors
Filtering anchors
	Retained 3483 anchors
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Predicting cell labels
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Predicting cell labels

Integrating dataset 2 with reference dataset
Finding integration vectors
Integrating data
Computing nearest neighbors
Running UMAP projection
16:46:17 Read 8288 rows
16:46:17 Processing block 1 of 1
16:46:17 Commencing smooth kNN distance calibration using 1 thread with target n_neighbors = 30
16:46:17 Initializing by weighted average of neighbor coordinates using 1 thread
16:46:18 Commencing optimization for 67 epochs, with 248640 positive edges
Using method 'umap'
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
16:46:22 Finished
Projecting cell embeddings
Finding neighborhoods
Finding anchors
	Found 8553 anchors
Filtering anchors
	Retained 2005 anchors
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Predicting cell labels
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Predicting cell labels

Integrating dataset 2 with reference dataset
Finding integration vectors
Integrating data
Computing nearest neighbors
Running UMAP projection
16:50:27 Read 13215 rows
16:50:27 Processing block 1 of 1
16:50:27 Commencing smooth kNN distance calibration using 1 thread with target n_neighbors = 30
16:50:27 Initializing by weighted average of neighbor coordinates using 1 thread
16:50:27 Commencing optimization for 67 epochs, with 396450 positive edges
Using method 'umap'
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
16:50:33 Finished
Projecting cell embeddings
Finding neighborhoods
Finding anchors
	Found 9142 anchors
Filtering anchors
	Retained 2347 anchors
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Predicting cell labels
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Predicting cell labels

Integrating dataset 2 with reference dataset
Finding integration vectors
Integrating data
Computing nearest neighbors
Running UMAP projection
16:54:47 Read 10133 rows
16:54:47 Processing block 1 of 1
16:54:47 Commencing smooth kNN distance calibration using 1 thread with target n_neighbors = 30
16:54:48 Initializing by weighted average of neighbor coordinates using 1 thread
16:54:48 Commencing optimization for 67 epochs, with 303990 positive edges
Using method 'umap'
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
16:54:53 Finished
Projecting cell embeddings
Finding neighborhoods
Finding anchors
	Found 6045 anchors
Filtering anchors
	Retained 1686 anchors
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Predicting cell labels
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Predicting cell labels

Integrating dataset 2 with reference dataset
Finding integration vectors
Integrating data
Computing nearest neighbors
Running UMAP projection
16:58:01 Read 8009 rows
16:58:01 Processing block 1 of 1
16:58:01 Commencing smooth kNN distance calibration using 1 thread with target n_neighbors = 30
16:58:02 Initializing by weighted average of neighbor coordinates using 1 thread
16:58:02 Commencing optimization for 67 epochs, with 240270 positive edges
Using method 'umap'
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
16:58:05 Finished
Projecting cell embeddings
Finding neighborhoods
Finding anchors
	Found 7012 anchors
Filtering anchors
	Retained 2392 anchors
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Predicting cell labels
Finding integration vectors
Finding integration vector weights
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
Predicting cell labels

Integrating dataset 2 with reference dataset
Finding integration vectors
Integrating data
Computing nearest neighbors
Running UMAP projection
17:01:28 Read 7192 rows
17:01:28 Processing block 1 of 1
17:01:28 Commencing smooth kNN distance calibration using 1 thread with target n_neighbors = 30
17:01:29 Initializing by weighted average of neighbor coordinates using 1 thread
17:01:29 Commencing optimization for 67 epochs, with 215760 positive edges
Using method 'umap'
0%   10   20   30   40   50   60   70   80   90   100%
[----|----|----|----|----|----|----|----|----|----|
**************************************************|
17:01:32 Finished
Warning message:
`invoke()` is deprecated as of rlang 0.4.0.
Please use `exec()` or `inject()` instead.
This warning is displayed once every 8 hours. 
